= Weekling

* Documentation: http://rdoc.info/projects/aef/weekling/
* Project: http://github.com/aef/weekling/

== DESCRIPTION

Weekling is a Ruby library which provides class representations to make date
calculations using weeks and week days much easier. Weeks and week days are
interpreted as in ISO 8601.

== FEATURES/PROBLEMS

* Completely written in Ruby
* Intended to be used with Ruby 1.9.2 or compatible
* Core class extensions can be disabled through bare mode
* Completely tested through RSpec

== SYNOPSIS

=== Loading

In most cases you want to load the library by the following command:

  require 'weekling'

In a bundler Gemfile you should use the following:

  gem 'weekling'

By default, Weekling extends the Date, DateTime and Time classes to allow their
objects to be castable to Week and Week::Day. Additionally the Aef namespace is
included into Object, so that you don't have to type the fully-qualified names
of the classes. Should you really don't want this, use the following:

  require 'weekling/bare'

Or for bundler Gemfiles:

  gem 'weekling', require: 'weekling/bare'

=== Weeks

You can construct a Week object by a given year and index (week number):

  week = Week.new(2012, 37)
  # => 2012-W37

To regain the year or index you can simply access the attributes:

  week.year
  # => 2012

  week.index
  # => 37

The next or previous week can be accessed by the respective methods:

  week.next
  # => 2012-W38

  week.previous
  # => 2012-W36

The week is also able to tell you if it is even or odd:

  week.even?
  # => false

  week.odd?
  # => true

You can also construct a range of weeks starting with the current, which can be
iterated through or which can be easily converted to an Array. The range will
run until given index in the future is reached. Notice that this means, if the
given index is lower or equal to the current, the end of the range will be in
the following year:

  week.until_index(45)
  # => 2012-W37..2012-W45

  week.until_index(11)
  # => 2012-W37..2013-W11

=== Week-days

You can either get an enumerable list of week-days from an existing week:

  week.days
  # => 2012-W37-1..2012-W37-7

  week.weekend
  # => [2012-W37-6, 2012-W37-7]

Or request individual week-days from a week object:

  week.day(3)
  # => 2012-W37-3

  week.day(:friday)
  # => 2012-W37-5

  week.monday
  # => 2012-W37-1

Or you can create a week-day by year, week and day. The day can be an index
between 1 and 7 (monday to sunday), or the lower-case english name of the day
as symbol. Example below:

  week_day = Week::Day.new(2012, 37, 4)
  # => 2012-W37-4

  week_day = Week::Day.new(2012, 37, :thursday)
  # => 2012-W37-4

To regain the week and the index you can access the attributes:

  week_day.week
  # => 2012-W37

  week_day.index
  # => 4

If you want the symbolized name instead, use the following:

  week_day.to_sym
  # => :thursday

As in weeks you can get the next and previous day the following way:

  week_day.next
  # => 2012-W37-5

  week_day.previous
  # => 2012-W37-3

Each week-day can be converted to a regular date easily:

  week_day.to_date
  # => #<Date: 2012-09-13 (â€¦)>

You can ask a week-day if it is a specific day in week:

  week_day.tuesday?
  # => false

  week_day.thursday?
  # => true

== REQUIREMENTS

None

=== Additional for automated testing
* rspec

== INSTALLATION

On *nix systems you may need to prefix the command with sudo to get root
privileges.

=== High security (recommended)

There is a high security installation option available through rubygems. It is
highly recommended over the normal installation, although it may be a bit less
comfortable. To use the installation method, you will need my public key, which
I use for cryptographic signatures on all my gems. You can find the public key
and more detailed verification information in the aef-certificates section of my
rubyforge project[https://rubyforge.org/frs/?group_id=7890&release_id=31749]

Add the key to your rubygems' trusted certificates by the following command:

  gem cert --add aef.pem

Now you can install the gem while automatically verifying it's signature by the
following command:

  gem install weekling -P HighSecurity

Please notice that you may need other keys for dependent libraries, so you may
have to install dependencies manually.  

=== Normal

  gem install weekling

=== Automated testing

Go into the root directory of the installed gem and run the following command
to start the test runner:

  rake spec

If something goes wrong you should be noticed through failing examples.

== DEVELOPMENT

This software is developed in the source code management system git hosted
at github.com. You can download the most recent sourcecode through the
following command:

  git clone https://github.com/aef/weekling.git

Help on making this software better is always very appreciated. If you want
your changes to be included in the official release, please send me a patch
through the project's tracker[https://rubyforge.org/tracker/?group_id=7890] at
rubyforge.org. You can generate a patch-file by the following command:

  git diff > patch.diff

Please make sure to write tests for your changes so that I won't break them
when changing other things on the library. Also notice that I can't promise
to include your changes before reviewing them.

== LICENSE

Copyright 2012 Alexander E. Fischer <aef@raxys.net>

This file is part of Weekling.

Weekling is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
